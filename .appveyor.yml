environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:

    # Python 2.7.10 is the latest version and is not pre-installed.
    - PYTHON: "C:\\Python27.10-x64"
      PYTHON_VERSION: "2.7.10"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python27.10-x32"
      PYTHON_VERSION: "2.7.10"
      PYTHON_ARCH: "32"

    # The lastest Python 3.4.
    - PYTHON: "C:\\Python34-x64" 
      PYTHON_VERSION: "3.4.3" # currently 3.4.3 
      PYTHON_ARCH: "64" 

    - PYTHON: "C:\\Python34-x32" 
      PYTHON_VERSION: "3.4.3" # currently 3.4.3 
      PYTHON_ARCH: "32" 


install:
  # Checking submodule(s) out
  - git submodule update --init --recursive
  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 -python -pip -stdint }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - "SET PYTHONPATH=%CD%;%PYTHONPATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% python build.py prepare"

build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python build.py pip"


test_script:
  # Run the project tests
  - "%CMD_IN_ENV% python build.py test"

after_test:
  # If tests are successful, create binary packages for the project.
  #- "%CMD_IN_ENV% python setup.py bdist_wheel"
  #- "%CMD_IN_ENV% python setup.py bdist_wininst"
  #- "%CMD_IN_ENV% python setup.py bdist_msi"
  #- ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#

