mixin Option(name, open)
  details(open=open)
    summary
      h4= name
    block

article.post
    header
        h2 #[a(href=Meta.url)
        
        p What's new in v0.90?

        .subhead by #[a(href="//twitter.com/spacy_io", rel="author" target="_blank") #{spaCy}] on #[time #{getDate(Meta.date).fulldate}]

    ul
        li Support for gazetteers
        li Set Lexeme attributes
    #[a.readmore(href=Meta.url) Full Change Log â–º]


section.intro
    p What's

+Option("conda", true)
  pre.language-bash: code
    | $ conda install spacy
    | $ python -m spacy.en.download

+Option("pip and virtualenv", true)
  p With Python 2.7 or Python 3, using Linux or OSX, run:

    pre.language-bash: code
      | $ pip install spacy
      | $ python -m spacy.en.download

  p
    | The download command fetches and installs about 300mb of data, for
    | the parser model and word vectors, which it installs within the spacy.en
    | package directory.


  +Option("Workaround for obsolete system Python", false)
    p
      | If you're stuck using a server with an old version of Python, and you
      | don't have root access, I've prepared a bootstrap script to help you
      | compile a local Python install.  Run:

    pre.language-bash: code
      | $ curl https://raw.githubusercontent.com/honnibal/spaCy/master/bootstrap_python_env.sh | bash && source .env/bin/activate



+Option("Compile from source", false)
  p
    | The other way to install the package is to clone the github repository,
    | and build it from source.  This installs an additional dependency,
    | Cython.  If you're using Python 2, I also recommend installing fabric
    | and fabtools &ndash; this is how I build the project.

  pre.language-bash: code
    | $ git clone https://github.com/honnibal/spaCy.git
    | $ cd spaCy
    | $ virtualenv .env && source .env/bin/activate
    | $ export PYTHONPATH=`pwd`
    | $ pip install -r requirements.txt
    | $ python setup.py build_ext --inplace
    | $ python -m spacy.en.download
    | $ pip install pytest
    | $ py.test tests/

  p
    | Python packaging is awkward at the best of times, and it's particularly tricky
    | with C extensions, built via Cython, requiring large data files.  So,
    | please report issues as you encounter them.

+Option("pypy (Unsupported)")
  | If PyPy support is a priority for you, please get in touch.  We could likely
  | fix the remaining issues, if necessary.  However, the library is likely to
  | be much slower on PyPy, as it's written in Cython, which produces code tuned
  | for the performance of CPython.

+Option("Windows (Unsupported)")
  | Unfortunately we don't currently support Windows.
