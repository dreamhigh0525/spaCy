include ./meta.jade
include ../header.jade

+WritePost(Meta)

    p By default spaCy loads a #[code data/vocab/vec.bin] file, where the #[em data] directory is within the #[code spacy.en] module directory.

    p You can customize the word vectors loaded by spaCy in three different ways. For the first two, you'll need to convert your vectors into spaCy's binary file format. The binary format is used because it's smaller and loads faster.

    p You can either place the binary file in the location spaCy expects
    
    pre
        code.language-python
            | from spacy.vocab import write_binary_vectors
            | import spacy.en
            | from os import path
            |  
            | def main(bz2_loc, bin_loc=None):
            |     if bin_loc is None:
            |         bin_loc = path.join(path.dirname(spacy.en.__file__), 'data', 'vocab', 'vec.bin')
            |     write_binary_vectors(bz2_loc, bin_loc)
            |  
            | if __name__ == '__main__':
            |     plac.call(main)



    ol
        li Replace the vec.bin, so your vectors will be loaded by default. The function #[code spacy.vocab.write_binary_vectors] is provided to convert files to spaCy's binary format. The advantage of the binary format is that it's smaller and loads faster.

        li Load vectors at run-time
        

Create the vec.bin file from a bz2 file using spacy.vocab.write_binary_vectors
Either replace spaCy's vec.bin file, or call nlp.vocab.load_rep_vectors at run-time, with the path to the binary file.
The above is a bit inconvenient at first, but the binary file format is much smaller and faster to load, and the vectors files are fairly big. Note that GloVe distributes in gzip format, not bzip.

Out of interest: are you using the GloVe vectors, or something you trained on your own data? If your own data, did you use Gensim? I'd like to make this much easier, so I'd appreciate suggestions for what work-flow you'd like to see.
    Load new vectors at run-time, optionally converting them
    
    pre
        code.language-python
            | import spacy.vocab
        
            | def set_spacy_vectors(nlp, binary_loc, bz2_loc=None):
            |     if bz2_loc is not None:
            |         spacy.vocab.write_binary_vectors(bz2_loc, binary_loc)
            |     write_binary_vectors(bz2_input_loc, binary_loc)
            |  
            |     nlp.vocab.load_rep_vectors(binary_loc)

